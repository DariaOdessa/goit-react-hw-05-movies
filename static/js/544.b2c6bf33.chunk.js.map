{"version":3,"file":"static/js/544.b2c6bf33.chunk.js","mappings":"uNAEaA,EAAYC,EAAAA,GAAAA,IAAH,oIAQTC,EAAcD,EAAAA,GAAAA,IAAH,mfAsBXE,EAAYF,EAAAA,GAAAA,GAAH,mG,SCRtB,EApBmB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIH,EAASI,QAEnB,SAACT,EAAD,UACGI,EAAOM,KAAI,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,GAAIC,EAApB,EAAoBA,MAApB,OACV,SAACX,EAAD,WACE,UAAC,KAAD,CAAMY,GAAE,kBAAaF,GAAMH,MAAO,CAAEM,KAAMV,GAA1C,WACE,gBACEW,IAAG,yCAAoCL,GACvCM,IAAKJ,KAEP,SAACV,EAAD,UAAYU,QANED,EADR,KAajB,C,+GCOD,UAzBa,WACX,OAA4BM,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gHAEuBC,EAAAA,EAAAA,MAFvB,cAEUC,EAFV,OAGUC,EAAgBD,EAAKE,QAC3BL,EAAUI,GAJd,mDAOIhB,QAAQC,IAAR,MAPJ,0DADc,uBAAC,WAAD,wBAYdiB,EACD,GAAE,KAGD,0BACE,SAAC,IAAD,CAAYrB,OAAQA,KAGzB,C,4MCzBDsB,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHN,EAAe,mCAAG,6GAEAK,IAAAA,IAAA,uCAA0CC,IAF1C,cAEjBC,EAFiB,yBAGhBA,EAASN,MAHO,gCAMvBf,QAAQC,IAAR,MANuB,yDAAH,qDAUfqB,EAAiB,mCAAG,WAAMC,GAAN,gGAEFJ,IAAAA,IAAA,gCAAmCC,EAAnC,iCAAmEG,EAAnE,yBAFE,cAEnBF,EAFmB,OAGzBrB,QAAQC,IAAIoB,EAASN,MAHI,kBAIlBM,EAASN,MAJS,gCAOzBf,QAAQC,IAAR,MAPyB,yDAAH,sDAWjBuB,EAAe,mCAAG,WAAMC,GAAN,gGAEAN,IAAAA,IAAA,iBAAoBM,EAApB,oBAAuCL,EAAvC,oBAFA,cAEjBC,EAFiB,yBAGhBA,EAASN,MAHO,gCAMvBf,QAAQC,IAAR,MANuB,yDAAH,sDAUfyB,EAAe,mCAAG,WAAMD,GAAN,gGAEAN,IAAAA,IAAA,iBAAoBM,EAApB,4BAA+CL,EAA/C,oBAFA,cAEjBC,EAFiB,OAGvBrB,QAAQC,IAAIoB,EAASN,MAHE,kBAIhBM,EAASN,MAJO,gCAOvBf,QAAQC,IAAR,MAPuB,yDAAH,sDAWf0B,EAAe,mCAAG,WAAMF,GAAN,gGAEAN,IAAAA,IAAA,iBAAoBM,EAApB,4BAA+CL,EAA/C,oBAFA,cAEjBC,EAFiB,OAGtBrB,QAAQC,IAAIoB,EAASN,MAHC,kBAIhBM,EAASN,MAJO,gCAOvBf,QAAQC,IAAR,MAPuB,yDAAH,qD","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\nmargin-top: 32px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 320px);\n  gap: 16px;\n    \n`;\n\nexport const CardWrapper = styled.div`\nmargin-bottom: 20px;\nflex-basis: calc((100% - 32px) / 3);\nborder: 1px solid grey;\nborder-radius: 4px;\ncursor: pointer;\n\ntransition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\ntransition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n      box-shadow: 1px 4px 6px rgba(0, 0, 0, 0.16), 0px 4px 4px rgba(0, 0, 0, 0.06),\n          0px 1px 1px rgba(0, 0, 0, 0.12);\n      transform: scale(1.03);\n  }\n\n> a {\n  text-decoration: none;\n}\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { PropTypes } from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, MovieName } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  console.log(location.state);\n  return (\n    <Container>\n      {movies.map(({ poster_path, id, title }) => (\n        <CardWrapper key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              alt={title}\n            />\n            <MovieName>{title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { getTrendyMovies } from 'services/api';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function getMovies() {\n      try {\n        const data = await getTrendyMovies();\n        const trendieMovies = data.results;\n        setMovies(trendieMovies);\n        return;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getMovies();\n  }, []);\n\n  return (\n    <div>\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e2ab7616285daea8fac6003f5ccdd72f';\n\nexport const getTrendyMovies = async() => {\n    try {\n        const response = await axios.get(`/trending/movie/week?api_key=${API_KEY}`); \n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getSearchedMovies = async(query) => {\n    try {\n        const response = await axios.get(`/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`); \n        console.log(response.data);\n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMovieDetails = async(movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`); \n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMovieCredits = async(movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`); \n        console.log(response.data);\n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMovieRewiews = async(movieId) => {\n    try {\n        const response = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`); \n         console.log(response.data);\n        return response.data;\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\n\n\n\n\n\n\n"],"names":["Container","styled","CardWrapper","MovieName","movies","location","useLocation","console","log","state","map","poster_path","id","title","to","from","src","alt","useState","setMovies","useEffect","getTrendyMovies","data","trendieMovies","results","getMovies","axios","API_KEY","response","getSearchedMovies","query","getMovieDetails","movieId","getMovieCredits","getMovieRewiews"],"sourceRoot":""}